# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `Soup.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Soup
_M_Soup = Ice.openModule('Soup')
__name__ = 'Soup'

if '_t_songdatas' not in _M_Soup.__dict__:
    _M_Soup._t_songdatas = IcePy.defineSequence('::Soup::songdatas', (), IcePy._t_byte)

if 'Song' not in _M_Soup.__dict__:
    _M_Soup.Song = Ice.createTempClass()
    class Song(object):
        def __init__(self, id=0, title='', author='', extension=''):
            self.id = id
            self.title = title
            self.author = author
            self.extension = extension

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.id)
            _h = 5 * _h + Ice.getHash(self.title)
            _h = 5 * _h + Ice.getHash(self.author)
            _h = 5 * _h + Ice.getHash(self.extension)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Soup.Song):
                return NotImplemented
            else:
                if self.id is None or other.id is None:
                    if self.id != other.id:
                        return (-1 if self.id is None else 1)
                else:
                    if self.id < other.id:
                        return -1
                    elif self.id > other.id:
                        return 1
                if self.title is None or other.title is None:
                    if self.title != other.title:
                        return (-1 if self.title is None else 1)
                else:
                    if self.title < other.title:
                        return -1
                    elif self.title > other.title:
                        return 1
                if self.author is None or other.author is None:
                    if self.author != other.author:
                        return (-1 if self.author is None else 1)
                else:
                    if self.author < other.author:
                        return -1
                    elif self.author > other.author:
                        return 1
                if self.extension is None or other.extension is None:
                    if self.extension != other.extension:
                        return (-1 if self.extension is None else 1)
                else:
                    if self.extension < other.extension:
                        return -1
                    elif self.extension > other.extension:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Soup._t_Song)

        __repr__ = __str__

    _M_Soup._t_Song = IcePy.defineStruct('::Soup::Song', Song, (), (
        ('id', (), IcePy._t_int),
        ('title', (), IcePy._t_string),
        ('author', (), IcePy._t_string),
        ('extension', (), IcePy._t_string)
    ))

    _M_Soup.Song = Song
    del Song

if '_t_Songs' not in _M_Soup.__dict__:
    _M_Soup._t_Songs = IcePy.defineSequence('::Soup::Songs', (), _M_Soup._t_Song)

_M_Soup._t_MusicLibrary = IcePy.defineValue('::Soup::MusicLibrary', Ice.Value, -1, (), False, True, None, ())

if 'MusicLibraryPrx' not in _M_Soup.__dict__:
    _M_Soup.MusicLibraryPrx = Ice.createTempClass()
    class MusicLibraryPrx(Ice.ObjectPrx):

        def addSong(self, title, author, extension, data, context=None):
            return _M_Soup.MusicLibrary._op_addSong.invoke(self, ((title, author, extension, data), context))

        def addSongAsync(self, title, author, extension, data, context=None):
            return _M_Soup.MusicLibrary._op_addSong.invokeAsync(self, ((title, author, extension, data), context))

        def begin_addSong(self, title, author, extension, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_Soup.MusicLibrary._op_addSong.begin(self, ((title, author, extension, data), _response, _ex, _sent, context))

        def end_addSong(self, _r):
            return _M_Soup.MusicLibrary._op_addSong.end(self, _r)

        def removeSong(self, song, context=None):
            return _M_Soup.MusicLibrary._op_removeSong.invoke(self, ((song, ), context))

        def removeSongAsync(self, song, context=None):
            return _M_Soup.MusicLibrary._op_removeSong.invokeAsync(self, ((song, ), context))

        def begin_removeSong(self, song, _response=None, _ex=None, _sent=None, context=None):
            return _M_Soup.MusicLibrary._op_removeSong.begin(self, ((song, ), _response, _ex, _sent, context))

        def end_removeSong(self, _r):
            return _M_Soup.MusicLibrary._op_removeSong.end(self, _r)

        def updateSong(self, song, data, context=None):
            return _M_Soup.MusicLibrary._op_updateSong.invoke(self, ((song, data), context))

        def updateSongAsync(self, song, data, context=None):
            return _M_Soup.MusicLibrary._op_updateSong.invokeAsync(self, ((song, data), context))

        def begin_updateSong(self, song, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_Soup.MusicLibrary._op_updateSong.begin(self, ((song, data), _response, _ex, _sent, context))

        def end_updateSong(self, _r):
            return _M_Soup.MusicLibrary._op_updateSong.end(self, _r)

        def searchByTitle(self, title, context=None):
            return _M_Soup.MusicLibrary._op_searchByTitle.invoke(self, ((title, ), context))

        def searchByTitleAsync(self, title, context=None):
            return _M_Soup.MusicLibrary._op_searchByTitle.invokeAsync(self, ((title, ), context))

        def begin_searchByTitle(self, title, _response=None, _ex=None, _sent=None, context=None):
            return _M_Soup.MusicLibrary._op_searchByTitle.begin(self, ((title, ), _response, _ex, _sent, context))

        def end_searchByTitle(self, _r):
            return _M_Soup.MusicLibrary._op_searchByTitle.end(self, _r)

        def searchByAuthor(self, author, context=None):
            return _M_Soup.MusicLibrary._op_searchByAuthor.invoke(self, ((author, ), context))

        def searchByAuthorAsync(self, author, context=None):
            return _M_Soup.MusicLibrary._op_searchByAuthor.invokeAsync(self, ((author, ), context))

        def begin_searchByAuthor(self, author, _response=None, _ex=None, _sent=None, context=None):
            return _M_Soup.MusicLibrary._op_searchByAuthor.begin(self, ((author, ), _response, _ex, _sent, context))

        def end_searchByAuthor(self, _r):
            return _M_Soup.MusicLibrary._op_searchByAuthor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Soup.MusicLibraryPrx.ice_checkedCast(proxy, '::Soup::MusicLibrary', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Soup.MusicLibraryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Soup::MusicLibrary'
    _M_Soup._t_MusicLibraryPrx = IcePy.defineProxy('::Soup::MusicLibrary', MusicLibraryPrx)

    _M_Soup.MusicLibraryPrx = MusicLibraryPrx
    del MusicLibraryPrx

    _M_Soup.MusicLibrary = Ice.createTempClass()
    class MusicLibrary(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Soup::MusicLibrary')

        def ice_id(self, current=None):
            return '::Soup::MusicLibrary'

        @staticmethod
        def ice_staticId():
            return '::Soup::MusicLibrary'

        def addSong(self, title, author, extension, data, current=None):
            raise NotImplementedError("servant method 'addSong' not implemented")

        def removeSong(self, song, current=None):
            raise NotImplementedError("servant method 'removeSong' not implemented")

        def updateSong(self, song, data, current=None):
            raise NotImplementedError("servant method 'updateSong' not implemented")

        def searchByTitle(self, title, current=None):
            raise NotImplementedError("servant method 'searchByTitle' not implemented")

        def searchByAuthor(self, author, current=None):
            raise NotImplementedError("servant method 'searchByAuthor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Soup._t_MusicLibraryDisp)

        __repr__ = __str__

    _M_Soup._t_MusicLibraryDisp = IcePy.defineClass('::Soup::MusicLibrary', MusicLibrary, (), None, ())
    MusicLibrary._ice_type = _M_Soup._t_MusicLibraryDisp

    MusicLibrary._op_addSong = IcePy.Operation('addSong', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_Soup._t_songdatas, False, 0)), (), None, ())
    MusicLibrary._op_removeSong = IcePy.Operation('removeSong', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Soup._t_Song, False, 0),), (), None, ())
    MusicLibrary._op_updateSong = IcePy.Operation('updateSong', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Soup._t_Song, False, 0), ((), _M_Soup._t_songdatas, False, 0)), (), None, ())
    MusicLibrary._op_searchByTitle = IcePy.Operation('searchByTitle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Soup._t_Songs, False, 0), ())
    MusicLibrary._op_searchByAuthor = IcePy.Operation('searchByAuthor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Soup._t_Songs, False, 0), ())

    _M_Soup.MusicLibrary = MusicLibrary
    del MusicLibrary

# End of module Soup
